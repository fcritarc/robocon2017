
Encoder_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000392  00000426  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000392  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800202  00800202  00000428  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000458  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011a2  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cda  00000000  00000000  0000168a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005b2  00000000  00000000  00002364  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  00002918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000623  00000000  00000000  000029d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000242  00000000  00000000  00002ff3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00003235  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	70 c1       	rjmp	.+736    	; 0x2fa <__vector_6>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e9       	ldi	r30, 0x92	; 146
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 30       	cpi	r26, 0x04	; 4
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	ba d0       	rcall	.+372    	; 0x294 <main>
 120:	36 c1       	rjmp	.+620    	; 0x38e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z7lcdinitv>:
volatile int count=0,dir=1;

void lcdinit()
{
	int i;
	PORTC &= 0x80 ;
 124:	88 b1       	in	r24, 0x08	; 8
 126:	80 78       	andi	r24, 0x80	; 128
 128:	88 b9       	out	0x08, r24	; 8
	cbit(PORTC,RS);
 12a:	40 98       	cbi	0x08, 0	; 8
	cbit(PORTC,RW);
 12c:	41 98       	cbi	0x08, 1	; 8
	PORTC = 0x30;
 12e:	80 e3       	ldi	r24, 0x30	; 48
 130:	88 b9       	out	0x08, r24	; 8
 132:	83 e0       	ldi	r24, 0x03	; 3
 134:	90 e0       	ldi	r25, 0x00	; 0
	for(i=0;i<=2;i++)
	{
		
		
		sbit(PORTC,EN);
 136:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 138:	ef ef       	ldi	r30, 0xFF	; 255
 13a:	f7 e4       	ldi	r31, 0x47	; 71
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <_Z7lcdinitv+0x18>
 140:	00 c0       	rjmp	.+0      	; 0x142 <_Z7lcdinitv+0x1e>
 142:	00 00       	nop
		_delay_ms(5);
		cbit(PORTC,EN);
 144:	42 98       	cbi	0x08, 2	; 8
 146:	e6 e6       	ldi	r30, 0x66	; 102
 148:	fe e0       	ldi	r31, 0x0E	; 14
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <_Z7lcdinitv+0x26>
 14e:	00 00       	nop
 150:	01 97       	sbiw	r24, 0x01	; 1
	int i;
	PORTC &= 0x80 ;
	cbit(PORTC,RS);
	cbit(PORTC,RW);
	PORTC = 0x30;
	for(i=0;i<=2;i++)
 152:	89 f7       	brne	.-30     	; 0x136 <_Z7lcdinitv+0x12>
		_delay_ms(5);
		cbit(PORTC,EN);
		_delay_ms(1);
	}
	
	PORTC = 0x20;
 154:	80 e2       	ldi	r24, 0x20	; 32
 156:	88 b9       	out	0x08, r24	; 8
	sbit(PORTC,EN);
 158:	42 9a       	sbi	0x08, 2	; 8
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	97 e4       	ldi	r25, 0x47	; 71
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <_Z7lcdinitv+0x3a>
 162:	00 c0       	rjmp	.+0      	; 0x164 <_Z7lcdinitv+0x40>
 164:	00 00       	nop
	_delay_ms(5);
	cbit(PORTC,EN);
 166:	42 98       	cbi	0x08, 2	; 8
 168:	e6 e6       	ldi	r30, 0x66	; 102
 16a:	fe e0       	ldi	r31, 0x0E	; 14
 16c:	31 97       	sbiw	r30, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <_Z7lcdinitv+0x48>
 170:	00 00       	nop
 172:	08 95       	ret

00000174 <_Z7commandh>:
void command(unsigned char cmd)
{
	unsigned char temp;
	temp=cmd;
	temp=temp & 0xF0;
	PORTC &= 0x0F;
 174:	98 b1       	in	r25, 0x08	; 8
 176:	9f 70       	andi	r25, 0x0F	; 15
 178:	98 b9       	out	0x08, r25	; 8
	PORTC |= temp;
 17a:	98 b1       	in	r25, 0x08	; 8

void command(unsigned char cmd)
{
	unsigned char temp;
	temp=cmd;
	temp=temp & 0xF0;
 17c:	28 2f       	mov	r18, r24
 17e:	20 7f       	andi	r18, 0xF0	; 240
	PORTC &= 0x0F;
	PORTC |= temp;
 180:	92 2b       	or	r25, r18
 182:	98 b9       	out	0x08, r25	; 8
	cbit(PORTC,RS);
 184:	40 98       	cbi	0x08, 0	; 8
	cbit(PORTC,RW);
 186:	41 98       	cbi	0x08, 1	; 8
	sbit(PORTC,EN);
 188:	42 9a       	sbi	0x08, 2	; 8
 18a:	ef ef       	ldi	r30, 0xFF	; 255
 18c:	f7 e4       	ldi	r31, 0x47	; 71
 18e:	31 97       	sbiw	r30, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <_Z7commandh+0x1a>
 192:	00 c0       	rjmp	.+0      	; 0x194 <_Z7commandh+0x20>
 194:	00 00       	nop
	_delay_ms(5);
	cbit(PORTC,EN);
 196:	42 98       	cbi	0x08, 2	; 8
 198:	e6 e6       	ldi	r30, 0x66	; 102
 19a:	fe e0       	ldi	r31, 0x0E	; 14
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <_Z7commandh+0x28>
 1a0:	00 00       	nop
	_delay_ms(1);
	
	temp=cmd;
	temp=temp & 0x0F;
	temp= temp<<4;
	PORTC &= 0x0F;
 1a2:	98 b1       	in	r25, 0x08	; 8
 1a4:	9f 70       	andi	r25, 0x0F	; 15
 1a6:	98 b9       	out	0x08, r25	; 8
	PORTC |= temp;
 1a8:	98 b1       	in	r25, 0x08	; 8
	cbit(PORTC,EN);
	_delay_ms(1);
	
	temp=cmd;
	temp=temp & 0x0F;
	temp= temp<<4;
 1aa:	82 95       	swap	r24
 1ac:	80 7f       	andi	r24, 0xF0	; 240
	PORTC &= 0x0F;
	PORTC |= temp;
 1ae:	89 2b       	or	r24, r25
 1b0:	88 b9       	out	0x08, r24	; 8
	cbit(PORTC,RS);
 1b2:	40 98       	cbi	0x08, 0	; 8
	cbit(PORTC,RW);
 1b4:	41 98       	cbi	0x08, 1	; 8
	sbit(PORTC,EN);
 1b6:	42 9a       	sbi	0x08, 2	; 8
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	97 e4       	ldi	r25, 0x47	; 71
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <_Z7commandh+0x48>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <_Z7commandh+0x4e>
 1c2:	00 00       	nop
	_delay_ms(5);
	cbit(PORTC,EN);
 1c4:	42 98       	cbi	0x08, 2	; 8
 1c6:	e6 e6       	ldi	r30, 0x66	; 102
 1c8:	fe e0       	ldi	r31, 0x0E	; 14
 1ca:	31 97       	sbiw	r30, 0x01	; 1
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <_Z7commandh+0x56>
 1ce:	00 00       	nop
 1d0:	08 95       	ret

000001d2 <_Z8lcdsetupv>:
}

void lcdsetup()
{
	//command(0x28);	//4 bit 2 row
	command(0x01);	//clr scr
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	cf df       	rcall	.-98     	; 0x174 <_Z7commandh>
	command(0x06);	//cursor right shift
 1d6:	86 e0       	ldi	r24, 0x06	; 6
 1d8:	cd df       	rcall	.-102    	; 0x174 <_Z7commandh>
	command(0x0E);	//cursor blink display on
 1da:	8e e0       	ldi	r24, 0x0E	; 14
 1dc:	cb df       	rcall	.-106    	; 0x174 <_Z7commandh>
	command(0x80);	//force cursor to 1 row 0 col
 1de:	80 e8       	ldi	r24, 0x80	; 128
 1e0:	c9 cf       	rjmp	.-110    	; 0x174 <_Z7commandh>
 1e2:	08 95       	ret

000001e4 <_Z6putchac>:
void putcha(char a)
{
	unsigned char temp;
	temp=a;
	temp=temp & 0xF0;
	PORTC &= 0x0F;
 1e4:	98 b1       	in	r25, 0x08	; 8
 1e6:	9f 70       	andi	r25, 0x0F	; 15
 1e8:	98 b9       	out	0x08, r25	; 8
	PORTC |= temp;
 1ea:	98 b1       	in	r25, 0x08	; 8

void putcha(char a)
{
	unsigned char temp;
	temp=a;
	temp=temp & 0xF0;
 1ec:	28 2f       	mov	r18, r24
 1ee:	20 7f       	andi	r18, 0xF0	; 240
	PORTC &= 0x0F;
	PORTC |= temp;
 1f0:	92 2b       	or	r25, r18
 1f2:	98 b9       	out	0x08, r25	; 8
	sbit(PORTC,RS);
 1f4:	40 9a       	sbi	0x08, 0	; 8
	cbit(PORTC,RW);
 1f6:	41 98       	cbi	0x08, 1	; 8
	sbit(PORTC,EN);
 1f8:	42 9a       	sbi	0x08, 2	; 8
 1fa:	ef ef       	ldi	r30, 0xFF	; 255
 1fc:	f7 e4       	ldi	r31, 0x47	; 71
 1fe:	31 97       	sbiw	r30, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <_Z6putchac+0x1a>
 202:	00 c0       	rjmp	.+0      	; 0x204 <_Z6putchac+0x20>
 204:	00 00       	nop
	_delay_ms(5);
	cbit(PORTC,EN);
 206:	42 98       	cbi	0x08, 2	; 8
 208:	e6 e6       	ldi	r30, 0x66	; 102
 20a:	fe e0       	ldi	r31, 0x0E	; 14
 20c:	31 97       	sbiw	r30, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <_Z6putchac+0x28>
 210:	00 00       	nop
	_delay_ms(1);
	
	temp=a;
	temp=temp & 0x0F;
	temp=temp<<4;
	PORTC &= 0x0F;
 212:	98 b1       	in	r25, 0x08	; 8
 214:	9f 70       	andi	r25, 0x0F	; 15
 216:	98 b9       	out	0x08, r25	; 8
	PORTC |= temp;
 218:	98 b1       	in	r25, 0x08	; 8
	cbit(PORTC,EN);
	_delay_ms(1);
	
	temp=a;
	temp=temp & 0x0F;
	temp=temp<<4;
 21a:	82 95       	swap	r24
 21c:	80 7f       	andi	r24, 0xF0	; 240
	PORTC &= 0x0F;
	PORTC |= temp;
 21e:	89 2b       	or	r24, r25
 220:	88 b9       	out	0x08, r24	; 8
	sbit(PORTC,RS);
 222:	40 9a       	sbi	0x08, 0	; 8
	cbit(PORTC,RW);
 224:	41 98       	cbi	0x08, 1	; 8
	sbit(PORTC,EN);
 226:	42 9a       	sbi	0x08, 2	; 8
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	97 e4       	ldi	r25, 0x47	; 71
 22c:	01 97       	sbiw	r24, 0x01	; 1
 22e:	f1 f7       	brne	.-4      	; 0x22c <_Z6putchac+0x48>
 230:	00 c0       	rjmp	.+0      	; 0x232 <_Z6putchac+0x4e>
 232:	00 00       	nop
	_delay_ms(5);
	cbit(PORTC,EN);
 234:	42 98       	cbi	0x08, 2	; 8
 236:	e6 e6       	ldi	r30, 0x66	; 102
 238:	fe e0       	ldi	r31, 0x0E	; 14
 23a:	31 97       	sbiw	r30, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <_Z6putchac+0x56>
 23e:	00 00       	nop
 240:	08 95       	ret

00000242 <_Z6putinti>:
	_delay_ms(1);
	
}
void putint(int val)
{	int flag=4;
 242:	ef 92       	push	r14
 244:	ff 92       	push	r15
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	cf 93       	push	r28
 24c:	df 93       	push	r29
 24e:	d8 2f       	mov	r29, r24
 250:	c9 2f       	mov	r28, r25
	command(0x85);
 252:	85 e8       	ldi	r24, 0x85	; 133
 254:	8f df       	rcall	.-226    	; 0x174 <_Z7commandh>
	command(0x04);
 256:	84 e0       	ldi	r24, 0x04	; 4
 258:	8d df       	rcall	.-230    	; 0x174 <_Z7commandh>
 25a:	04 e0       	ldi	r16, 0x04	; 4
 25c:	10 e0       	ldi	r17, 0x00	; 0
	while(flag!=0)
	{
		
		putcha((val%10)+48);
 25e:	0f 2e       	mov	r0, r31
 260:	fa e0       	ldi	r31, 0x0A	; 10
 262:	ef 2e       	mov	r14, r31
 264:	f1 2c       	mov	r15, r1
 266:	f0 2d       	mov	r31, r0
 268:	8d 2f       	mov	r24, r29
 26a:	9c 2f       	mov	r25, r28
 26c:	b7 01       	movw	r22, r14
 26e:	68 d0       	rcall	.+208    	; 0x340 <__divmodhi4>
 270:	d6 2f       	mov	r29, r22
 272:	c7 2f       	mov	r28, r23
 274:	80 5d       	subi	r24, 0xD0	; 208
 276:	b6 df       	rcall	.-148    	; 0x1e4 <_Z6putchac>
 278:	01 50       	subi	r16, 0x01	; 1
 27a:	11 09       	sbc	r17, r1
}
void putint(int val)
{	int flag=4;
	command(0x85);
	command(0x04);
	while(flag!=0)
 27c:	a9 f7       	brne	.-22     	; 0x268 <_Z6putinti+0x26>
		putcha((val%10)+48);
		val=val/10;
		flag--;
	}
	
	command(0x86);
 27e:	86 e8       	ldi	r24, 0x86	; 134
 280:	79 df       	rcall	.-270    	; 0x174 <_Z7commandh>
	command(0x06);
 282:	86 e0       	ldi	r24, 0x06	; 6
 284:	77 df       	rcall	.-274    	; 0x174 <_Z7commandh>
}
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	0f 91       	pop	r16
 28e:	ff 90       	pop	r15
 290:	ef 90       	pop	r14
 292:	08 95       	ret

00000294 <main>:
int main(void)
{	DDRC = 0xF7;
 294:	87 ef       	ldi	r24, 0xF7	; 247
 296:	87 b9       	out	0x07, r24	; 7
	lcdinit();
 298:	45 df       	rcall	.-374    	; 0x124 <_Z7lcdinitv>
	lcdsetup();
 29a:	9b df       	rcall	.-202    	; 0x1d2 <_Z8lcdsetupv>
	EIMSK = (1<<INT5);
 29c:	80 e2       	ldi	r24, 0x20	; 32
 29e:	8d bb       	out	0x1d, r24	; 29
	EICRB = (1<<ISC51);
 2a0:	88 e0       	ldi	r24, 0x08	; 8
 2a2:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x70006a>
	sei();
 2a6:	78 94       	sei
	while(1)
	{
		if(count>=0)
		{
			putint(count);
			dir=1;
 2a8:	c1 e0       	ldi	r28, 0x01	; 1
 2aa:	d0 e0       	ldi	r29, 0x00	; 0
	
	
	
	while(1)
	{
		if(count>=0)
 2ac:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 2b0:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 2b4:	99 23       	and	r25, r25
 2b6:	54 f0       	brlt	.+20     	; 0x2cc <main+0x38>
		{
			putint(count);
 2b8:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 2bc:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 2c0:	c0 df       	rcall	.-128    	; 0x242 <_Z6putinti>
			dir=1;
 2c2:	d0 93 01 02 	sts	0x0201, r29	; 0x800201 <__data_start+0x1>
 2c6:	c0 93 00 02 	sts	0x0200, r28	; 0x800200 <__data_start>
 2ca:	0c c0       	rjmp	.+24     	; 0x2e4 <main+0x50>
		}
		else
		{
			putint(count*(-1));
 2cc:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 2d0:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 2d4:	91 95       	neg	r25
 2d6:	81 95       	neg	r24
 2d8:	91 09       	sbc	r25, r1
 2da:	b3 df       	rcall	.-154    	; 0x242 <_Z6putinti>
			dir=0;
 2dc:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <__data_start+0x1>
 2e0:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__data_start>
			
		}
		
		putcha(' ');
 2e4:	80 e2       	ldi	r24, 0x20	; 32
 2e6:	7e df       	rcall	.-260    	; 0x1e4 <_Z6putchac>
		putcha('d');
 2e8:	84 e6       	ldi	r24, 0x64	; 100
 2ea:	7c df       	rcall	.-264    	; 0x1e4 <_Z6putchac>
		putcha(dir+48);
 2ec:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 2f0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 2f4:	80 5d       	subi	r24, 0xD0	; 208
 2f6:	76 df       	rcall	.-276    	; 0x1e4 <_Z6putchac>
	}
	
	command(0x86);
	command(0x06);
}
int main(void)
 2f8:	d9 cf       	rjmp	.-78     	; 0x2ac <main+0x18>

000002fa <__vector_6>:
		putcha(dir+48);
		//TODO:: Please write your application code */
	}
}
ISR(INT5_vect)
{
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	8f 93       	push	r24
 306:	9f 93       	push	r25
	if((PINE&0x10)==0x10)
 308:	64 9b       	sbis	0x0c, 4	; 12
 30a:	0a c0       	rjmp	.+20     	; 0x320 <__vector_6+0x26>
	count++;
 30c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 310:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 314:	01 96       	adiw	r24, 0x01	; 1
 316:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 31a:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
 31e:	09 c0       	rjmp	.+18     	; 0x332 <__vector_6+0x38>
	else count--;
 320:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 324:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 32e:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
	
}
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	0f 90       	pop	r0
 338:	0f be       	out	0x3f, r0	; 63
 33a:	0f 90       	pop	r0
 33c:	1f 90       	pop	r1
 33e:	18 95       	reti

00000340 <__divmodhi4>:
 340:	97 fb       	bst	r25, 7
 342:	07 2e       	mov	r0, r23
 344:	16 f4       	brtc	.+4      	; 0x34a <__divmodhi4+0xa>
 346:	00 94       	com	r0
 348:	06 d0       	rcall	.+12     	; 0x356 <__divmodhi4_neg1>
 34a:	77 fd       	sbrc	r23, 7
 34c:	08 d0       	rcall	.+16     	; 0x35e <__divmodhi4_neg2>
 34e:	0b d0       	rcall	.+22     	; 0x366 <__udivmodhi4>
 350:	07 fc       	sbrc	r0, 7
 352:	05 d0       	rcall	.+10     	; 0x35e <__divmodhi4_neg2>
 354:	3e f4       	brtc	.+14     	; 0x364 <__divmodhi4_exit>

00000356 <__divmodhi4_neg1>:
 356:	90 95       	com	r25
 358:	81 95       	neg	r24
 35a:	9f 4f       	sbci	r25, 0xFF	; 255
 35c:	08 95       	ret

0000035e <__divmodhi4_neg2>:
 35e:	70 95       	com	r23
 360:	61 95       	neg	r22
 362:	7f 4f       	sbci	r23, 0xFF	; 255

00000364 <__divmodhi4_exit>:
 364:	08 95       	ret

00000366 <__udivmodhi4>:
 366:	aa 1b       	sub	r26, r26
 368:	bb 1b       	sub	r27, r27
 36a:	51 e1       	ldi	r21, 0x11	; 17
 36c:	07 c0       	rjmp	.+14     	; 0x37c <__udivmodhi4_ep>

0000036e <__udivmodhi4_loop>:
 36e:	aa 1f       	adc	r26, r26
 370:	bb 1f       	adc	r27, r27
 372:	a6 17       	cp	r26, r22
 374:	b7 07       	cpc	r27, r23
 376:	10 f0       	brcs	.+4      	; 0x37c <__udivmodhi4_ep>
 378:	a6 1b       	sub	r26, r22
 37a:	b7 0b       	sbc	r27, r23

0000037c <__udivmodhi4_ep>:
 37c:	88 1f       	adc	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	5a 95       	dec	r21
 382:	a9 f7       	brne	.-22     	; 0x36e <__udivmodhi4_loop>
 384:	80 95       	com	r24
 386:	90 95       	com	r25
 388:	bc 01       	movw	r22, r24
 38a:	cd 01       	movw	r24, r26
 38c:	08 95       	ret

0000038e <_exit>:
 38e:	f8 94       	cli

00000390 <__stop_program>:
 390:	ff cf       	rjmp	.-2      	; 0x390 <__stop_program>
