
PS2_lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800200  00000a00  00000a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000051  00800224  00800224  00000ab8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ae8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000b28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dd9  00000000  00000000  00000be0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f1b  00000000  00000000  000029b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a89  00000000  00000000  000038d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00004360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000998  00000000  00000000  00004534  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000082c  00000000  00000000  00004ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000056f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e0       	ldi	r30, 0x00	; 0
  fc:	fa e0       	ldi	r31, 0x0A	; 10
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 32       	cpi	r26, 0x24	; 36
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e2       	ldi	r26, 0x24	; 36
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 37       	cpi	r26, 0x75	; 117
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	29 d2       	rcall	.+1106   	; 0x572 <main>
 120:	6d c4       	rjmp	.+2266   	; 0x9fc <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <_Z12lcd_set_4bitv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 124:	86 e6       	ldi	r24, 0x66	; 102
 126:	9e e0       	ldi	r25, 0x0E	; 14
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <_Z12lcd_set_4bitv+0x4>
 12c:	00 00       	nop
//Function to Reset LCD
void lcd_set_4bit()
{
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 12e:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 130:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
 132:	80 e3       	ldi	r24, 0x30	; 48
 134:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 136:	42 9a       	sbi	0x08, 2	; 8
 138:	ef ef       	ldi	r30, 0xFF	; 255
 13a:	f7 e4       	ldi	r31, 0x47	; 71
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <_Z12lcd_set_4bitv+0x18>
 140:	00 c0       	rjmp	.+0      	; 0x142 <_Z12lcd_set_4bitv+0x1e>
 142:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 144:	42 98       	cbi	0x08, 2	; 8
 146:	e6 e6       	ldi	r30, 0x66	; 102
 148:	fe e0       	ldi	r31, 0x0E	; 14
 14a:	31 97       	sbiw	r30, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <_Z12lcd_set_4bitv+0x26>
 14e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 150:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 152:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
 154:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 156:	42 9a       	sbi	0x08, 2	; 8
 158:	ef ef       	ldi	r30, 0xFF	; 255
 15a:	f7 e4       	ldi	r31, 0x47	; 71
 15c:	31 97       	sbiw	r30, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <_Z12lcd_set_4bitv+0x38>
 160:	00 c0       	rjmp	.+0      	; 0x162 <_Z12lcd_set_4bitv+0x3e>
 162:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 164:	42 98       	cbi	0x08, 2	; 8
 166:	e6 e6       	ldi	r30, 0x66	; 102
 168:	fe e0       	ldi	r31, 0x0E	; 14
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <_Z12lcd_set_4bitv+0x46>
 16e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 170:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 172:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x30;				//Sending 3 in the upper nibble
 174:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 176:	42 9a       	sbi	0x08, 2	; 8
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	97 e4       	ldi	r25, 0x47	; 71
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <_Z12lcd_set_4bitv+0x58>
 180:	00 c0       	rjmp	.+0      	; 0x182 <_Z12lcd_set_4bitv+0x5e>
 182:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 184:	42 98       	cbi	0x08, 2	; 8
 186:	e6 e6       	ldi	r30, 0x66	; 102
 188:	fe e0       	ldi	r31, 0x0E	; 14
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <_Z12lcd_set_4bitv+0x66>
 18e:	00 00       	nop

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
 190:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
 192:	41 98       	cbi	0x08, 1	; 8
	lcd_port = 0x20;				//Sending 2 in the upper nibble to initialize LCD 4-bit mode
 194:	80 e2       	ldi	r24, 0x20	; 32
 196:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,EN);				//Set Enable Pin
 198:	42 9a       	sbi	0x08, 2	; 8
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	97 e4       	ldi	r25, 0x47	; 71
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <_Z12lcd_set_4bitv+0x7a>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <_Z12lcd_set_4bitv+0x80>
 1a4:	00 00       	nop
	_delay_ms(5);					//delay
	cbit(lcd_port,EN);				//Clear Enable Pin
 1a6:	42 98       	cbi	0x08, 2	; 8
 1a8:	08 95       	ret

000001aa <_Z14lcd_wr_commandh>:
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
	lcd_port &= 0x0F;
 1aa:	98 b1       	in	r25, 0x08	; 8
 1ac:	9f 70       	andi	r25, 0x0F	; 15
 1ae:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 1b0:	98 b1       	in	r25, 0x08	; 8
//Function to write command on LCD
void lcd_wr_command(unsigned char cmd)
{
	unsigned char temp;
	temp = cmd;
	temp = temp & 0xF0;
 1b2:	28 2f       	mov	r18, r24
 1b4:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 1b6:	92 2b       	or	r25, r18
 1b8:	98 b9       	out	0x08, r25	; 8
	cbit(lcd_port,RS);
 1ba:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1bc:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1be:	42 9a       	sbi	0x08, 2	; 8
 1c0:	ef ef       	ldi	r30, 0xFF	; 255
 1c2:	f7 e4       	ldi	r31, 0x47	; 71
 1c4:	31 97       	sbiw	r30, 0x01	; 1
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <_Z14lcd_wr_commandh+0x1a>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <_Z14lcd_wr_commandh+0x20>
 1ca:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1cc:	42 98       	cbi	0x08, 2	; 8
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
	lcd_port &= 0x0F;
 1ce:	98 b1       	in	r25, 0x08	; 8
 1d0:	9f 70       	andi	r25, 0x0F	; 15
 1d2:	98 b9       	out	0x08, r25	; 8
	lcd_port |= cmd;
 1d4:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);
	
	cmd = cmd & 0x0F;
	cmd = cmd<<4;
 1d6:	82 95       	swap	r24
 1d8:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= cmd;
 1da:	89 2b       	or	r24, r25
 1dc:	88 b9       	out	0x08, r24	; 8
	cbit(lcd_port,RS);
 1de:	40 98       	cbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 1e0:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 1e2:	42 9a       	sbi	0x08, 2	; 8
 1e4:	8f ef       	ldi	r24, 0xFF	; 255
 1e6:	97 e4       	ldi	r25, 0x47	; 71
 1e8:	01 97       	sbiw	r24, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <_Z14lcd_wr_commandh+0x3e>
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <_Z14lcd_wr_commandh+0x44>
 1ee:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 1f0:	42 98       	cbi	0x08, 2	; 8
 1f2:	08 95       	ret

000001f4 <_Z8lcd_initv>:
 1f4:	86 e6       	ldi	r24, 0x66	; 102
 1f6:	9e e0       	ldi	r25, 0x0E	; 14
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <_Z8lcd_initv+0x4>
 1fc:	00 00       	nop
//Function to Initialize LCD
void lcd_init()
{
	_delay_ms(1);

	lcd_wr_command(0x28); //4-bit mode and 5x8 dot character font
 1fe:	88 e2       	ldi	r24, 0x28	; 40
 200:	d4 df       	rcall	.-88     	; 0x1aa <_Z14lcd_wr_commandh>
	lcd_wr_command(0x01); //Clear LCD display
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	d2 df       	rcall	.-92     	; 0x1aa <_Z14lcd_wr_commandh>
	lcd_wr_command(0x06); //Auto increment cursor position
 206:	86 e0       	ldi	r24, 0x06	; 6
 208:	d0 df       	rcall	.-96     	; 0x1aa <_Z14lcd_wr_commandh>
	lcd_wr_command(0x0E); //Turn on LCD and cursor
 20a:	8e e0       	ldi	r24, 0x0E	; 14
 20c:	ce df       	rcall	.-100    	; 0x1aa <_Z14lcd_wr_commandh>
	lcd_wr_command(0x80); //Set cursor position
 20e:	80 e8       	ldi	r24, 0x80	; 128
 210:	cc cf       	rjmp	.-104    	; 0x1aa <_Z14lcd_wr_commandh>
 212:	08 95       	ret

00000214 <_Z11lcd_wr_charc>:
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
	lcd_port &= 0x0F;
 214:	98 b1       	in	r25, 0x08	; 8
 216:	9f 70       	andi	r25, 0x0F	; 15
 218:	98 b9       	out	0x08, r25	; 8
	lcd_port |= temp;
 21a:	98 b1       	in	r25, 0x08	; 8
//Function to write data on LCD
void lcd_wr_char(char letter)
{
	char temp;
	temp = letter;
	temp = (temp & 0xF0);
 21c:	28 2f       	mov	r18, r24
 21e:	20 7f       	andi	r18, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= temp;
 220:	92 2b       	or	r25, r18
 222:	98 b9       	out	0x08, r25	; 8
	sbit(lcd_port,RS);
 224:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 226:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 228:	42 9a       	sbi	0x08, 2	; 8
 22a:	ef ef       	ldi	r30, 0xFF	; 255
 22c:	f7 e4       	ldi	r31, 0x47	; 71
 22e:	31 97       	sbiw	r30, 0x01	; 1
 230:	f1 f7       	brne	.-4      	; 0x22e <_Z11lcd_wr_charc+0x1a>
 232:	00 c0       	rjmp	.+0      	; 0x234 <_Z11lcd_wr_charc+0x20>
 234:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 236:	42 98       	cbi	0x08, 2	; 8

	letter = letter & 0x0F;
	letter = letter<<4;
	lcd_port &= 0x0F;
 238:	98 b1       	in	r25, 0x08	; 8
 23a:	9f 70       	andi	r25, 0x0F	; 15
 23c:	98 b9       	out	0x08, r25	; 8
	lcd_port |= letter;
 23e:	98 b1       	in	r25, 0x08	; 8
	sbit(lcd_port,EN);
	_delay_ms(5);
	cbit(lcd_port,EN);

	letter = letter & 0x0F;
	letter = letter<<4;
 240:	82 95       	swap	r24
 242:	80 7f       	andi	r24, 0xF0	; 240
	lcd_port &= 0x0F;
	lcd_port |= letter;
 244:	89 2b       	or	r24, r25
 246:	88 b9       	out	0x08, r24	; 8
	sbit(lcd_port,RS);
 248:	40 9a       	sbi	0x08, 0	; 8
	cbit(lcd_port,RW);
 24a:	41 98       	cbi	0x08, 1	; 8
	sbit(lcd_port,EN);
 24c:	42 9a       	sbi	0x08, 2	; 8
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	97 e4       	ldi	r25, 0x47	; 71
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <_Z11lcd_wr_charc+0x3e>
 256:	00 c0       	rjmp	.+0      	; 0x258 <_Z11lcd_wr_charc+0x44>
 258:	00 00       	nop
	_delay_ms(5);
	cbit(lcd_port,EN);
 25a:	42 98       	cbi	0x08, 2	; 8
 25c:	08 95       	ret

0000025e <_Z8lcd_homev>:
}


void lcd_home()
{
	lcd_wr_command(0x80);
 25e:	80 e8       	ldi	r24, 0x80	; 128
 260:	a4 cf       	rjmp	.-184    	; 0x1aa <_Z14lcd_wr_commandh>
 262:	08 95       	ret

00000264 <_Z10lcd_stringPc>:
}


//Function to Print String on LCD
void lcd_string(char *str)
{
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	ec 01       	movw	r28, r24
	while(*str != '\0')
 26a:	88 81       	ld	r24, Y
 26c:	88 23       	and	r24, r24
 26e:	29 f0       	breq	.+10     	; 0x27a <_Z10lcd_stringPc+0x16>
 270:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_wr_char(*str);
 272:	d0 df       	rcall	.-96     	; 0x214 <_Z11lcd_wr_charc>


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
 274:	89 91       	ld	r24, Y+
 276:	81 11       	cpse	r24, r1
 278:	fc cf       	rjmp	.-8      	; 0x272 <_Z10lcd_stringPc+0xe>
	{
		lcd_wr_char(*str);
		str++;
	}
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <_Z10lcd_cursorcc>:

//Position the LCD cursor at "row", "column"

void lcd_cursor (char row, char column)
{
	switch (row) {
 280:	82 30       	cpi	r24, 0x02	; 2
 282:	69 f0       	breq	.+26     	; 0x29e <_Z10lcd_cursorcc+0x1e>
 284:	18 f4       	brcc	.+6      	; 0x28c <_Z10lcd_cursorcc+0xc>
 286:	81 30       	cpi	r24, 0x01	; 1
 288:	31 f0       	breq	.+12     	; 0x296 <_Z10lcd_cursorcc+0x16>
 28a:	08 95       	ret
 28c:	83 30       	cpi	r24, 0x03	; 3
 28e:	59 f0       	breq	.+22     	; 0x2a6 <_Z10lcd_cursorcc+0x26>
 290:	84 30       	cpi	r24, 0x04	; 4
 292:	69 f0       	breq	.+26     	; 0x2ae <_Z10lcd_cursorcc+0x2e>
 294:	08 95       	ret
		case 1: lcd_wr_command (0x80 + column - 1); break;
 296:	8f e7       	ldi	r24, 0x7F	; 127
 298:	86 0f       	add	r24, r22
 29a:	87 cf       	rjmp	.-242    	; 0x1aa <_Z14lcd_wr_commandh>
 29c:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 29e:	8f eb       	ldi	r24, 0xBF	; 191
 2a0:	86 0f       	add	r24, r22
 2a2:	83 cf       	rjmp	.-250    	; 0x1aa <_Z14lcd_wr_commandh>
 2a4:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 2a6:	83 e9       	ldi	r24, 0x93	; 147
 2a8:	86 0f       	add	r24, r22
 2aa:	7f cf       	rjmp	.-258    	; 0x1aa <_Z14lcd_wr_commandh>
 2ac:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 2ae:	83 ed       	ldi	r24, 0xD3	; 211
 2b0:	86 0f       	add	r24, r22
 2b2:	7b cf       	rjmp	.-266    	; 0x1aa <_Z14lcd_wr_commandh>
 2b4:	08 95       	ret

000002b6 <_Z9lcd_printccji>:
	}
}

//Function to print any input value up to the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 2b6:	0f 93       	push	r16
 2b8:	1f 93       	push	r17
 2ba:	cf 93       	push	r28
 2bc:	df 93       	push	r29
 2be:	8a 01       	movw	r16, r20
 2c0:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 2c2:	88 23       	and	r24, r24
 2c4:	11 f0       	breq	.+4      	; 0x2ca <_Z9lcd_printccji+0x14>
 2c6:	61 11       	cpse	r22, r1
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <_Z9lcd_printccji+0x18>
	{
		lcd_home();
 2ca:	c9 df       	rcall	.-110    	; 0x25e <_Z8lcd_homev>
 2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <_Z9lcd_printccji+0x1a>
	}
	else
	{
		lcd_cursor(row,coloumn);
 2ce:	d8 df       	rcall	.-80     	; 0x280 <_Z10lcd_cursorcc>
	}
	if(digits==5 || flag==1)
 2d0:	c5 30       	cpi	r28, 0x05	; 5
 2d2:	d1 05       	cpc	r29, r1
 2d4:	b9 f4       	brne	.+46     	; 0x304 <_Z9lcd_printccji+0x4e>
	{
		million=value/10000+48;
 2d6:	98 01       	movw	r18, r16
 2d8:	32 95       	swap	r19
 2da:	22 95       	swap	r18
 2dc:	2f 70       	andi	r18, 0x0F	; 15
 2de:	23 27       	eor	r18, r19
 2e0:	3f 70       	andi	r19, 0x0F	; 15
 2e2:	23 27       	eor	r18, r19
 2e4:	a7 e4       	ldi	r26, 0x47	; 71
 2e6:	b3 e0       	ldi	r27, 0x03	; 3
 2e8:	7a d3       	rcall	.+1780   	; 0x9de <__umulhisi3>
 2ea:	96 95       	lsr	r25
 2ec:	87 95       	ror	r24
 2ee:	96 95       	lsr	r25
 2f0:	87 95       	ror	r24
 2f2:	96 95       	lsr	r25
 2f4:	87 95       	ror	r24
 2f6:	c0 96       	adiw	r24, 0x30	; 48
 2f8:	90 93 3f 02 	sts	0x023F, r25	; 0x80023f <million+0x1>
 2fc:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <million>
		lcd_wr_char(million);
 300:	89 df       	rcall	.-238    	; 0x214 <_Z11lcd_wr_charc>
 302:	04 c0       	rjmp	.+8      	; 0x30c <_Z9lcd_printccji+0x56>
		flag=1;
	}
	if(digits==4 || flag==1)
 304:	c4 30       	cpi	r28, 0x04	; 4
 306:	d1 05       	cpc	r29, r1
 308:	09 f0       	breq	.+2      	; 0x30c <_Z9lcd_printccji+0x56>
 30a:	b7 c0       	rjmp	.+366    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
	{
		temp = value/1000;
 30c:	98 01       	movw	r18, r16
 30e:	36 95       	lsr	r19
 310:	27 95       	ror	r18
 312:	36 95       	lsr	r19
 314:	27 95       	ror	r18
 316:	36 95       	lsr	r19
 318:	27 95       	ror	r18
 31a:	a5 ec       	ldi	r26, 0xC5	; 197
 31c:	b0 e2       	ldi	r27, 0x20	; 32
 31e:	5f d3       	rcall	.+1726   	; 0x9de <__umulhisi3>
 320:	ac 01       	movw	r20, r24
 322:	52 95       	swap	r21
 324:	42 95       	swap	r20
 326:	4f 70       	andi	r20, 0x0F	; 15
 328:	45 27       	eor	r20, r21
 32a:	5f 70       	andi	r21, 0x0F	; 15
 32c:	45 27       	eor	r20, r21
 32e:	50 93 49 02 	sts	0x0249, r21	; 0x800249 <temp+0x1>
 332:	40 93 48 02 	sts	0x0248, r20	; 0x800248 <temp>
		thousand = temp%10 + 48;
 336:	9a 01       	movw	r18, r20
 338:	ad ec       	ldi	r26, 0xCD	; 205
 33a:	bc ec       	ldi	r27, 0xCC	; 204
 33c:	50 d3       	rcall	.+1696   	; 0x9de <__umulhisi3>
 33e:	96 95       	lsr	r25
 340:	87 95       	ror	r24
 342:	96 95       	lsr	r25
 344:	87 95       	ror	r24
 346:	96 95       	lsr	r25
 348:	87 95       	ror	r24
 34a:	9c 01       	movw	r18, r24
 34c:	22 0f       	add	r18, r18
 34e:	33 1f       	adc	r19, r19
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	82 0f       	add	r24, r18
 35e:	93 1f       	adc	r25, r19
 360:	9a 01       	movw	r18, r20
 362:	28 1b       	sub	r18, r24
 364:	39 0b       	sbc	r19, r25
 366:	c9 01       	movw	r24, r18
 368:	c0 96       	adiw	r24, 0x30	; 48
 36a:	90 93 41 02 	sts	0x0241, r25	; 0x800241 <thousand+0x1>
 36e:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <thousand>
		lcd_wr_char(thousand);
 372:	50 df       	rcall	.-352    	; 0x214 <_Z11lcd_wr_charc>
		flag=1;
	}
	if(digits==3 || flag==1)
	{
		temp = value/100;
 374:	98 01       	movw	r18, r16
 376:	36 95       	lsr	r19
 378:	27 95       	ror	r18
 37a:	36 95       	lsr	r19
 37c:	27 95       	ror	r18
 37e:	ab e7       	ldi	r26, 0x7B	; 123
 380:	b4 e1       	ldi	r27, 0x14	; 20
 382:	2d d3       	rcall	.+1626   	; 0x9de <__umulhisi3>
 384:	ac 01       	movw	r20, r24
 386:	56 95       	lsr	r21
 388:	47 95       	ror	r20
 38a:	50 93 49 02 	sts	0x0249, r21	; 0x800249 <temp+0x1>
 38e:	40 93 48 02 	sts	0x0248, r20	; 0x800248 <temp>
		hundred = temp%10 + 48;
 392:	9a 01       	movw	r18, r20
 394:	ad ec       	ldi	r26, 0xCD	; 205
 396:	bc ec       	ldi	r27, 0xCC	; 204
 398:	22 d3       	rcall	.+1604   	; 0x9de <__umulhisi3>
 39a:	96 95       	lsr	r25
 39c:	87 95       	ror	r24
 39e:	96 95       	lsr	r25
 3a0:	87 95       	ror	r24
 3a2:	96 95       	lsr	r25
 3a4:	87 95       	ror	r24
 3a6:	9c 01       	movw	r18, r24
 3a8:	22 0f       	add	r18, r18
 3aa:	33 1f       	adc	r19, r19
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	88 0f       	add	r24, r24
 3b2:	99 1f       	adc	r25, r25
 3b4:	88 0f       	add	r24, r24
 3b6:	99 1f       	adc	r25, r25
 3b8:	82 0f       	add	r24, r18
 3ba:	93 1f       	adc	r25, r19
 3bc:	9a 01       	movw	r18, r20
 3be:	28 1b       	sub	r18, r24
 3c0:	39 0b       	sbc	r19, r25
 3c2:	c9 01       	movw	r24, r18
 3c4:	c0 96       	adiw	r24, 0x30	; 48
 3c6:	90 93 43 02 	sts	0x0243, r25	; 0x800243 <hundred+0x1>
 3ca:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <hundred>
		lcd_wr_char(hundred);
 3ce:	22 df       	rcall	.-444    	; 0x214 <_Z11lcd_wr_charc>
 3d0:	04 c0       	rjmp	.+8      	; 0x3da <_Z9lcd_printccji+0x124>
		flag=1;
	}
	if(digits==2 || flag==1)
 3d2:	c2 30       	cpi	r28, 0x02	; 2
 3d4:	d1 05       	cpc	r29, r1
 3d6:	09 f0       	breq	.+2      	; 0x3da <_Z9lcd_printccji+0x124>
 3d8:	55 c0       	rjmp	.+170    	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
	{
		temp = value/10;
 3da:	98 01       	movw	r18, r16
 3dc:	ad ec       	ldi	r26, 0xCD	; 205
 3de:	bc ec       	ldi	r27, 0xCC	; 204
 3e0:	fe d2       	rcall	.+1532   	; 0x9de <__umulhisi3>
 3e2:	ac 01       	movw	r20, r24
 3e4:	56 95       	lsr	r21
 3e6:	47 95       	ror	r20
 3e8:	56 95       	lsr	r21
 3ea:	47 95       	ror	r20
 3ec:	56 95       	lsr	r21
 3ee:	47 95       	ror	r20
 3f0:	50 93 49 02 	sts	0x0249, r21	; 0x800249 <temp+0x1>
 3f4:	40 93 48 02 	sts	0x0248, r20	; 0x800248 <temp>
		tens = temp%10 + 48;
 3f8:	9a 01       	movw	r18, r20
 3fa:	f1 d2       	rcall	.+1506   	; 0x9de <__umulhisi3>
 3fc:	96 95       	lsr	r25
 3fe:	87 95       	ror	r24
 400:	96 95       	lsr	r25
 402:	87 95       	ror	r24
 404:	96 95       	lsr	r25
 406:	87 95       	ror	r24
 408:	9c 01       	movw	r18, r24
 40a:	22 0f       	add	r18, r18
 40c:	33 1f       	adc	r19, r19
 40e:	88 0f       	add	r24, r24
 410:	99 1f       	adc	r25, r25
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	88 0f       	add	r24, r24
 418:	99 1f       	adc	r25, r25
 41a:	82 0f       	add	r24, r18
 41c:	93 1f       	adc	r25, r19
 41e:	9a 01       	movw	r18, r20
 420:	28 1b       	sub	r18, r24
 422:	39 0b       	sbc	r19, r25
 424:	c9 01       	movw	r24, r18
 426:	c0 96       	adiw	r24, 0x30	; 48
 428:	90 93 45 02 	sts	0x0245, r25	; 0x800245 <tens+0x1>
 42c:	80 93 44 02 	sts	0x0244, r24	; 0x800244 <tens>
		lcd_wr_char(tens);
 430:	f1 de       	rcall	.-542    	; 0x214 <_Z11lcd_wr_charc>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
 432:	98 01       	movw	r18, r16
 434:	ad ec       	ldi	r26, 0xCD	; 205
 436:	bc ec       	ldi	r27, 0xCC	; 204
 438:	d2 d2       	rcall	.+1444   	; 0x9de <__umulhisi3>
 43a:	96 95       	lsr	r25
 43c:	87 95       	ror	r24
 43e:	96 95       	lsr	r25
 440:	87 95       	ror	r24
 442:	96 95       	lsr	r25
 444:	87 95       	ror	r24
 446:	9c 01       	movw	r18, r24
 448:	22 0f       	add	r18, r18
 44a:	33 1f       	adc	r19, r19
 44c:	88 0f       	add	r24, r24
 44e:	99 1f       	adc	r25, r25
 450:	88 0f       	add	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	82 0f       	add	r24, r18
 45a:	93 1f       	adc	r25, r19
 45c:	98 01       	movw	r18, r16
 45e:	28 1b       	sub	r18, r24
 460:	39 0b       	sbc	r19, r25
 462:	c9 01       	movw	r24, r18
 464:	c0 96       	adiw	r24, 0x30	; 48
 466:	90 93 47 02 	sts	0x0247, r25	; 0x800247 <unit+0x1>
 46a:	80 93 46 02 	sts	0x0246, r24	; 0x800246 <unit>
		lcd_wr_char(unit);
 46e:	d2 de       	rcall	.-604    	; 0x214 <_Z11lcd_wr_charc>
	}
	if(digits>5)
 470:	26 97       	sbiw	r28, 0x06	; 6
 472:	64 f0       	brlt	.+24     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
	{
		lcd_wr_char('E');
 474:	85 e4       	ldi	r24, 0x45	; 69
 476:	ce de       	rcall	.-612    	; 0x214 <_Z11lcd_wr_charc>
 478:	09 c0       	rjmp	.+18     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		temp = value/1000;
		thousand = temp%10 + 48;
		lcd_wr_char(thousand);
		flag=1;
	}
	if(digits==3 || flag==1)
 47a:	c3 30       	cpi	r28, 0x03	; 3
 47c:	d1 05       	cpc	r29, r1
 47e:	09 f0       	breq	.+2      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 480:	a8 cf       	rjmp	.-176    	; 0x3d2 <_Z9lcd_printccji+0x11c>
 482:	78 cf       	rjmp	.-272    	; 0x374 <_Z9lcd_printccji+0xbe>
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
 484:	c1 30       	cpi	r28, 0x01	; 1
 486:	d1 05       	cpc	r29, r1
 488:	99 f7       	brne	.-26     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
 48a:	d3 cf       	rjmp	.-90     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
	}
	if(digits>5)
	{
		lcd_wr_char('E');
	}
}
 48c:	df 91       	pop	r29
 48e:	cf 91       	pop	r28
 490:	1f 91       	pop	r17
 492:	0f 91       	pop	r16
 494:	08 95       	ret

00000496 <_Z12values_inputv>:
volatile uint8_t ry;
int cross_button , square_button , circle_button , triangle_button , r1_button , l1_button , l2_button;
int pad_up, pad_down, pad_left, pad_right;
void values_input()
{
	psx_read_gamepad();
 496:	b0 d1       	rcall	.+864    	; 0x7f8 <_Z16psx_read_gamepadv>
	lx = psx_stick(PSS_LX);
 498:	87 e0       	ldi	r24, 0x07	; 7
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	9b d2       	rcall	.+1334   	; 0x9d4 <_Z9psx_stickj>
 49e:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <lx>
	ly = psx_stick(PSS_LY);
 4a2:	88 e0       	ldi	r24, 0x08	; 8
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	96 d2       	rcall	.+1324   	; 0x9d4 <_Z9psx_stickj>
 4a8:	80 93 3c 02 	sts	0x023C, r24	; 0x80023c <ly>
	ry = psx_stick(PSS_RY);
 4ac:	86 e0       	ldi	r24, 0x06	; 6
 4ae:	90 e0       	ldi	r25, 0x00	; 0
 4b0:	91 d2       	rcall	.+1314   	; 0x9d4 <_Z9psx_stickj>
 4b2:	80 93 3a 02 	sts	0x023A, r24	; 0x80023a <ry>
	rx = psx_stick(PSS_RX);
 4b6:	85 e0       	ldi	r24, 0x05	; 5
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	8c d2       	rcall	.+1304   	; 0x9d4 <_Z9psx_stickj>
 4bc:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <rx>
	cross_button = psx_button(PSB_CROSS);
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	90 e4       	ldi	r25, 0x40	; 64
 4c4:	7a d2       	rcall	.+1268   	; 0x9ba <_Z10psx_buttonj>
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <cross_button+0x1>
 4cc:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <cross_button>
	square_button = psx_button(PSB_SQUARE);
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	90 e8       	ldi	r25, 0x80	; 128
 4d4:	72 d2       	rcall	.+1252   	; 0x9ba <_Z10psx_buttonj>
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	90 93 37 02 	sts	0x0237, r25	; 0x800237 <square_button+0x1>
 4dc:	80 93 36 02 	sts	0x0236, r24	; 0x800236 <square_button>
	circle_button = psx_button(PSB_CIRCLE);
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	90 e2       	ldi	r25, 0x20	; 32
 4e4:	6a d2       	rcall	.+1236   	; 0x9ba <_Z10psx_buttonj>
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	90 93 35 02 	sts	0x0235, r25	; 0x800235 <circle_button+0x1>
 4ec:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <circle_button>
	triangle_button = psx_button(PSB_TRIANGLE);
 4f0:	80 e0       	ldi	r24, 0x00	; 0
 4f2:	90 e1       	ldi	r25, 0x10	; 16
 4f4:	62 d2       	rcall	.+1220   	; 0x9ba <_Z10psx_buttonj>
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	90 93 33 02 	sts	0x0233, r25	; 0x800233 <triangle_button+0x1>
 4fc:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <triangle_button>
	pad_up = psx_button(PSB_PAD_UP);
 500:	80 e1       	ldi	r24, 0x10	; 16
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	5a d2       	rcall	.+1204   	; 0x9ba <_Z10psx_buttonj>
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	90 93 2b 02 	sts	0x022B, r25	; 0x80022b <pad_up+0x1>
 50c:	80 93 2a 02 	sts	0x022A, r24	; 0x80022a <pad_up>
	pad_down = psx_button(PSB_PAD_DOWN);
 510:	80 e4       	ldi	r24, 0x40	; 64
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	52 d2       	rcall	.+1188   	; 0x9ba <_Z10psx_buttonj>
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	90 93 29 02 	sts	0x0229, r25	; 0x800229 <pad_down+0x1>
 51c:	80 93 28 02 	sts	0x0228, r24	; 0x800228 <pad_down>
	pad_left = psx_button(PSB_PAD_LEFT);
 520:	80 e8       	ldi	r24, 0x80	; 128
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	4a d2       	rcall	.+1172   	; 0x9ba <_Z10psx_buttonj>
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	90 93 27 02 	sts	0x0227, r25	; 0x800227 <pad_left+0x1>
 52c:	80 93 26 02 	sts	0x0226, r24	; 0x800226 <pad_left>
	pad_right = psx_button(PSB_PAD_RIGHT);
 530:	80 e2       	ldi	r24, 0x20	; 32
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	42 d2       	rcall	.+1156   	; 0x9ba <_Z10psx_buttonj>
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	90 93 25 02 	sts	0x0225, r25	; 0x800225 <__data_end+0x1>
 53c:	80 93 24 02 	sts	0x0224, r24	; 0x800224 <__data_end>
	r1_button = psx_button(PSB_R1);
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	98 e0       	ldi	r25, 0x08	; 8
 544:	3a d2       	rcall	.+1140   	; 0x9ba <_Z10psx_buttonj>
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <r1_button+0x1>
 54c:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <r1_button>
	l1_button = psx_button(PSB_L1);
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	94 e0       	ldi	r25, 0x04	; 4
 554:	32 d2       	rcall	.+1124   	; 0x9ba <_Z10psx_buttonj>
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <l1_button+0x1>
 55c:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <l1_button>
	l2_button = psx_button(PSB_L2);
 560:	80 e0       	ldi	r24, 0x00	; 0
 562:	91 e0       	ldi	r25, 0x01	; 1
 564:	2a d2       	rcall	.+1108   	; 0x9ba <_Z10psx_buttonj>
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	90 93 2d 02 	sts	0x022D, r25	; 0x80022d <l2_button+0x1>
 56c:	80 93 2c 02 	sts	0x022C, r24	; 0x80022c <l2_button>
 570:	08 95       	ret

00000572 <main>:
}

int main(void)
{																		//DESCRIPTION:					PORT:
	psx_init(&PORTK , 1 , &PORTK , 4 , &PORTK , 0 , &PORTK , 2);		//PS2 Initialization			K
 572:	68 94       	set
 574:	aa 24       	eor	r10, r10
 576:	a1 f8       	bld	r10, 1
 578:	68 94       	set
 57a:	cc 24       	eor	r12, r12
 57c:	c3 f8       	bld	r12, 3
 57e:	dd 24       	eor	r13, r13
 580:	d3 94       	inc	r13
 582:	e1 2c       	mov	r14, r1
 584:	08 e0       	ldi	r16, 0x08	; 8
 586:	11 e0       	ldi	r17, 0x01	; 1
 588:	24 e0       	ldi	r18, 0x04	; 4
 58a:	48 e0       	ldi	r20, 0x08	; 8
 58c:	51 e0       	ldi	r21, 0x01	; 1
 58e:	61 e0       	ldi	r22, 0x01	; 1
 590:	88 e0       	ldi	r24, 0x08	; 8
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	44 d1       	rcall	.+648    	; 0x81e <_Z8psx_initPVhhS0_hS0_hS0_h>
	DDRC = 0xFF;														//LCD							C
 596:	8f ef       	ldi	r24, 0xFF	; 255
 598:	87 b9       	out	0x07, r24	; 7
	PORTC &= 0x80;														//LCD 
 59a:	88 b1       	in	r24, 0x08	; 8
 59c:	80 78       	andi	r24, 0x80	; 128
 59e:	88 b9       	out	0x08, r24	; 8
	lcd_set_4bit();														//LCD 
 5a0:	c1 dd       	rcall	.-1150   	; 0x124 <_Z12lcd_set_4bitv>
	lcd_init();															//LCD   
 5a2:	28 de       	rcall	.-944    	; 0x1f4 <_Z8lcd_initv>
	while(1)
    {
	values_input();
 5a4:	78 df       	rcall	.-272    	; 0x496 <_Z12values_inputv>
	lcd_cursor(1,2);
 5a6:	62 e0       	ldi	r22, 0x02	; 2
 5a8:	81 e0       	ldi	r24, 0x01	; 1
 5aa:	6a de       	rcall	.-812    	; 0x280 <_Z10lcd_cursorcc>
	lcd_string("RX");
 5ac:	87 e1       	ldi	r24, 0x17	; 23
 5ae:	92 e0       	ldi	r25, 0x02	; 2
 5b0:	59 de       	rcall	.-846    	; 0x264 <_Z10lcd_stringPc>
	lcd_cursor(1,6);
 5b2:	66 e0       	ldi	r22, 0x06	; 6
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	64 de       	rcall	.-824    	; 0x280 <_Z10lcd_cursorcc>
	lcd_string("RY");
 5b8:	8a e1       	ldi	r24, 0x1A	; 26
 5ba:	92 e0       	ldi	r25, 0x02	; 2
 5bc:	53 de       	rcall	.-858    	; 0x264 <_Z10lcd_stringPc>
	lcd_cursor(1,10);
 5be:	6a e0       	ldi	r22, 0x0A	; 10
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	5e de       	rcall	.-836    	; 0x280 <_Z10lcd_cursorcc>
	lcd_string("LX");
 5c4:	8d e1       	ldi	r24, 0x1D	; 29
 5c6:	92 e0       	ldi	r25, 0x02	; 2
 5c8:	4d de       	rcall	.-870    	; 0x264 <_Z10lcd_stringPc>
	lcd_cursor(1,14);
 5ca:	6e e0       	ldi	r22, 0x0E	; 14
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	58 de       	rcall	.-848    	; 0x280 <_Z10lcd_cursorcc>
	lcd_string("LY");
 5d0:	80 e2       	ldi	r24, 0x20	; 32
 5d2:	92 e0       	ldi	r25, 0x02	; 2
 5d4:	47 de       	rcall	.-882    	; 0x264 <_Z10lcd_stringPc>
	lcd_print(2,1,rx,3);
 5d6:	40 91 3b 02 	lds	r20, 0x023B	; 0x80023b <rx>
 5da:	50 e0       	ldi	r21, 0x00	; 0
 5dc:	23 e0       	ldi	r18, 0x03	; 3
 5de:	30 e0       	ldi	r19, 0x00	; 0
 5e0:	61 e0       	ldi	r22, 0x01	; 1
 5e2:	82 e0       	ldi	r24, 0x02	; 2
 5e4:	68 de       	rcall	.-816    	; 0x2b6 <_Z9lcd_printccji>
	lcd_print(2,5,ry,3);
 5e6:	40 91 3a 02 	lds	r20, 0x023A	; 0x80023a <ry>
 5ea:	50 e0       	ldi	r21, 0x00	; 0
 5ec:	23 e0       	ldi	r18, 0x03	; 3
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	65 e0       	ldi	r22, 0x05	; 5
 5f2:	82 e0       	ldi	r24, 0x02	; 2
 5f4:	60 de       	rcall	.-832    	; 0x2b6 <_Z9lcd_printccji>
	lcd_print(2,9,lx,3);
 5f6:	40 91 3d 02 	lds	r20, 0x023D	; 0x80023d <lx>
 5fa:	50 e0       	ldi	r21, 0x00	; 0
 5fc:	23 e0       	ldi	r18, 0x03	; 3
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	69 e0       	ldi	r22, 0x09	; 9
 602:	82 e0       	ldi	r24, 0x02	; 2
 604:	58 de       	rcall	.-848    	; 0x2b6 <_Z9lcd_printccji>
	lcd_print(2,13,ly,3);
 606:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <ly>
 60a:	50 e0       	ldi	r21, 0x00	; 0
 60c:	23 e0       	ldi	r18, 0x03	; 3
 60e:	30 e0       	ldi	r19, 0x00	; 0
 610:	6d e0       	ldi	r22, 0x0D	; 13
 612:	82 e0       	ldi	r24, 0x02	; 2
 614:	50 de       	rcall	.-864    	; 0x2b6 <_Z9lcd_printccji>
 616:	2f ef       	ldi	r18, 0xFF	; 255
 618:	8f e7       	ldi	r24, 0x7F	; 127
 61a:	94 e0       	ldi	r25, 0x04	; 4
 61c:	21 50       	subi	r18, 0x01	; 1
 61e:	80 40       	sbci	r24, 0x00	; 0
 620:	90 40       	sbci	r25, 0x00	; 0
 622:	e1 f7       	brne	.-8      	; 0x61c <main+0xaa>
 624:	00 c0       	rjmp	.+0      	; 0x626 <main+0xb4>
 626:	00 00       	nop
 628:	bd cf       	rjmp	.-134    	; 0x5a4 <main+0x32>

0000062a <_Z18_psx_gamepad_shifth>:


uint16_t psx_buttons() {
  uint16_t buttons = *(uint16_t*)(_data + 3); //Get 2 bytes, comprising data positions 3 and 4.
  return ~buttons;
}
 62a:	1f 93       	push	r17
 62c:	cf 93       	push	r28
 62e:	df 93       	push	r29
 630:	40 e0       	ldi	r20, 0x00	; 0
 632:	50 e0       	ldi	r21, 0x00	; 0
 634:	10 e0       	ldi	r17, 0x00	; 0
 636:	e1 e0       	ldi	r30, 0x01	; 1
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	a8 2f       	mov	r26, r24
 63c:	b0 e0       	ldi	r27, 0x00	; 0
 63e:	c0 91 71 02 	lds	r28, 0x0271	; 0x800271 <_ZL11_clock_port>
 642:	d0 91 72 02 	lds	r29, 0x0272	; 0x800272 <_ZL11_clock_port+0x1>
 646:	28 81       	ld	r18, Y
 648:	bf 01       	movw	r22, r30
 64a:	00 90 62 02 	lds	r0, 0x0262	; 0x800262 <_ZL10_clock_pin>
 64e:	02 c0       	rjmp	.+4      	; 0x654 <_Z18_psx_gamepad_shifth+0x2a>
 650:	66 0f       	add	r22, r22
 652:	77 1f       	adc	r23, r23
 654:	0a 94       	dec	r0
 656:	e2 f7       	brpl	.-8      	; 0x650 <_Z18_psx_gamepad_shifth+0x26>
 658:	96 2f       	mov	r25, r22
 65a:	90 95       	com	r25
 65c:	92 23       	and	r25, r18
 65e:	98 83       	st	Y, r25
 660:	64 2f       	mov	r22, r20
 662:	cd 01       	movw	r24, r26
 664:	04 2e       	mov	r0, r20
 666:	02 c0       	rjmp	.+4      	; 0x66c <_Z18_psx_gamepad_shifth+0x42>
 668:	95 95       	asr	r25
 66a:	87 95       	ror	r24
 66c:	0a 94       	dec	r0
 66e:	e2 f7       	brpl	.-8      	; 0x668 <_Z18_psx_gamepad_shifth+0x3e>
 670:	80 ff       	sbrs	r24, 0
 672:	10 c0       	rjmp	.+32     	; 0x694 <_Z18_psx_gamepad_shifth+0x6a>
 674:	c0 91 6f 02 	lds	r28, 0x026F	; 0x80026f <_ZL13_command_port>
 678:	d0 91 70 02 	lds	r29, 0x0270	; 0x800270 <_ZL13_command_port+0x1>
 67c:	28 81       	ld	r18, Y
 67e:	cf 01       	movw	r24, r30
 680:	00 90 61 02 	lds	r0, 0x0261	; 0x800261 <_ZL12_command_pin>
 684:	02 c0       	rjmp	.+4      	; 0x68a <_Z18_psx_gamepad_shifth+0x60>
 686:	88 0f       	add	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	0a 94       	dec	r0
 68c:	e2 f7       	brpl	.-8      	; 0x686 <_Z18_psx_gamepad_shifth+0x5c>
 68e:	82 2b       	or	r24, r18
 690:	88 83       	st	Y, r24
 692:	11 c0       	rjmp	.+34     	; 0x6b6 <_Z18_psx_gamepad_shifth+0x8c>
 694:	c0 91 6f 02 	lds	r28, 0x026F	; 0x80026f <_ZL13_command_port>
 698:	d0 91 70 02 	lds	r29, 0x0270	; 0x800270 <_ZL13_command_port+0x1>
 69c:	28 81       	ld	r18, Y
 69e:	cf 01       	movw	r24, r30
 6a0:	00 90 61 02 	lds	r0, 0x0261	; 0x800261 <_ZL12_command_pin>
 6a4:	02 c0       	rjmp	.+4      	; 0x6aa <_Z18_psx_gamepad_shifth+0x80>
 6a6:	88 0f       	add	r24, r24
 6a8:	99 1f       	adc	r25, r25
 6aa:	0a 94       	dec	r0
 6ac:	e2 f7       	brpl	.-8      	; 0x6a6 <_Z18_psx_gamepad_shifth+0x7c>
 6ae:	98 2f       	mov	r25, r24
 6b0:	90 95       	com	r25
 6b2:	92 23       	and	r25, r18
 6b4:	98 83       	st	Y, r25
 6b6:	83 e0       	ldi	r24, 0x03	; 3
 6b8:	8a 95       	dec	r24
 6ba:	f1 f7       	brne	.-4      	; 0x6b8 <_Z18_psx_gamepad_shifth+0x8e>
 6bc:	00 00       	nop
 6be:	c0 91 71 02 	lds	r28, 0x0271	; 0x800271 <_ZL11_clock_port>
 6c2:	d0 91 72 02 	lds	r29, 0x0272	; 0x800272 <_ZL11_clock_port+0x1>
 6c6:	98 81       	ld	r25, Y
 6c8:	9f 01       	movw	r18, r30
 6ca:	00 90 62 02 	lds	r0, 0x0262	; 0x800262 <_ZL10_clock_pin>
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <_Z18_psx_gamepad_shifth+0xaa>
 6d0:	22 0f       	add	r18, r18
 6d2:	33 1f       	adc	r19, r19
 6d4:	0a 94       	dec	r0
 6d6:	e2 f7       	brpl	.-8      	; 0x6d0 <_Z18_psx_gamepad_shifth+0xa6>
 6d8:	29 2b       	or	r18, r25
 6da:	28 83       	st	Y, r18
 6dc:	c0 91 6b 02 	lds	r28, 0x026B	; 0x80026b <_ZL8_data_in>
 6e0:	d0 91 6c 02 	lds	r29, 0x026C	; 0x80026c <_ZL8_data_in+0x1>
 6e4:	28 81       	ld	r18, Y
 6e6:	30 e0       	ldi	r19, 0x00	; 0
 6e8:	00 90 5f 02 	lds	r0, 0x025F	; 0x80025f <_ZL9_data_pin>
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <_Z18_psx_gamepad_shifth+0xc8>
 6ee:	35 95       	asr	r19
 6f0:	27 95       	ror	r18
 6f2:	0a 94       	dec	r0
 6f4:	e2 f7       	brpl	.-8      	; 0x6ee <_Z18_psx_gamepad_shifth+0xc4>
 6f6:	20 ff       	sbrs	r18, 0
 6f8:	07 c0       	rjmp	.+14     	; 0x708 <_Z18_psx_gamepad_shifth+0xde>
 6fa:	cf 01       	movw	r24, r30
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <_Z18_psx_gamepad_shifth+0xd8>
 6fe:	88 0f       	add	r24, r24
 700:	99 1f       	adc	r25, r25
 702:	6a 95       	dec	r22
 704:	e2 f7       	brpl	.-8      	; 0x6fe <_Z18_psx_gamepad_shifth+0xd4>
 706:	18 2b       	or	r17, r24
 708:	83 e0       	ldi	r24, 0x03	; 3
 70a:	8a 95       	dec	r24
 70c:	f1 f7       	brne	.-4      	; 0x70a <_Z18_psx_gamepad_shifth+0xe0>
 70e:	00 00       	nop
 710:	4f 5f       	subi	r20, 0xFF	; 255
 712:	5f 4f       	sbci	r21, 0xFF	; 255
 714:	48 30       	cpi	r20, 0x08	; 8
 716:	51 05       	cpc	r21, r1
 718:	09 f0       	breq	.+2      	; 0x71c <_Z18_psx_gamepad_shifth+0xf2>
 71a:	91 cf       	rjmp	.-222    	; 0x63e <_Z18_psx_gamepad_shifth+0x14>
 71c:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <_ZL11_clock_port>
 720:	f0 91 72 02 	lds	r31, 0x0272	; 0x800272 <_ZL11_clock_port+0x1>
 724:	20 81       	ld	r18, Z
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	00 90 62 02 	lds	r0, 0x0262	; 0x800262 <_ZL10_clock_pin>
 72e:	02 c0       	rjmp	.+4      	; 0x734 <_Z18_psx_gamepad_shifth+0x10a>
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	0a 94       	dec	r0
 736:	e2 f7       	brpl	.-8      	; 0x730 <_Z18_psx_gamepad_shifth+0x106>
 738:	82 2b       	or	r24, r18
 73a:	80 83       	st	Z, r24
 73c:	81 2f       	mov	r24, r17
 73e:	df 91       	pop	r29
 740:	cf 91       	pop	r28
 742:	1f 91       	pop	r17
 744:	08 95       	ret

00000746 <_Z17_psx_send_commandPhh>:
 746:	0f 93       	push	r16
 748:	1f 93       	push	r17
 74a:	cf 93       	push	r28
 74c:	df 93       	push	r29
 74e:	a0 91 6d 02 	lds	r26, 0x026D	; 0x80026d <_ZL15_attention_port>
 752:	b0 91 6e 02 	lds	r27, 0x026E	; 0x80026e <_ZL15_attention_port+0x1>
 756:	5c 91       	ld	r21, X
 758:	21 e0       	ldi	r18, 0x01	; 1
 75a:	30 e0       	ldi	r19, 0x00	; 0
 75c:	f9 01       	movw	r30, r18
 75e:	00 90 60 02 	lds	r0, 0x0260	; 0x800260 <_ZL14_attention_pin>
 762:	02 c0       	rjmp	.+4      	; 0x768 <_Z17_psx_send_commandPhh+0x22>
 764:	ee 0f       	add	r30, r30
 766:	ff 1f       	adc	r31, r31
 768:	0a 94       	dec	r0
 76a:	e2 f7       	brpl	.-8      	; 0x764 <_Z17_psx_send_commandPhh+0x1e>
 76c:	4e 2f       	mov	r20, r30
 76e:	40 95       	com	r20
 770:	45 23       	and	r20, r21
 772:	4c 93       	st	X, r20
 774:	e0 91 6f 02 	lds	r30, 0x026F	; 0x80026f <_ZL13_command_port>
 778:	f0 91 70 02 	lds	r31, 0x0270	; 0x800270 <_ZL13_command_port+0x1>
 77c:	70 81       	ld	r23, Z
 77e:	a9 01       	movw	r20, r18
 780:	00 90 61 02 	lds	r0, 0x0261	; 0x800261 <_ZL12_command_pin>
 784:	02 c0       	rjmp	.+4      	; 0x78a <_Z17_psx_send_commandPhh+0x44>
 786:	44 0f       	add	r20, r20
 788:	55 1f       	adc	r21, r21
 78a:	0a 94       	dec	r0
 78c:	e2 f7       	brpl	.-8      	; 0x786 <_Z17_psx_send_commandPhh+0x40>
 78e:	47 2b       	or	r20, r23
 790:	40 83       	st	Z, r20
 792:	e0 91 71 02 	lds	r30, 0x0271	; 0x800271 <_ZL11_clock_port>
 796:	f0 91 72 02 	lds	r31, 0x0272	; 0x800272 <_ZL11_clock_port+0x1>
 79a:	40 81       	ld	r20, Z
 79c:	00 90 62 02 	lds	r0, 0x0262	; 0x800262 <_ZL10_clock_pin>
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <_Z17_psx_send_commandPhh+0x60>
 7a2:	22 0f       	add	r18, r18
 7a4:	33 1f       	adc	r19, r19
 7a6:	0a 94       	dec	r0
 7a8:	e2 f7       	brpl	.-8      	; 0x7a2 <_Z17_psx_send_commandPhh+0x5c>
 7aa:	24 2b       	or	r18, r20
 7ac:	20 83       	st	Z, r18
 7ae:	66 23       	and	r22, r22
 7b0:	71 f0       	breq	.+28     	; 0x7ce <_Z17_psx_send_commandPhh+0x88>
 7b2:	ec 01       	movw	r28, r24
 7b4:	61 50       	subi	r22, 0x01	; 1
 7b6:	06 2f       	mov	r16, r22
 7b8:	10 e0       	ldi	r17, 0x00	; 0
 7ba:	0f 5f       	subi	r16, 0xFF	; 255
 7bc:	1f 4f       	sbci	r17, 0xFF	; 255
 7be:	08 0f       	add	r16, r24
 7c0:	19 1f       	adc	r17, r25
 7c2:	88 81       	ld	r24, Y
 7c4:	32 df       	rcall	.-412    	; 0x62a <_Z18_psx_gamepad_shifth>
 7c6:	89 93       	st	Y+, r24
 7c8:	c0 17       	cp	r28, r16
 7ca:	d1 07       	cpc	r29, r17
 7cc:	d1 f7       	brne	.-12     	; 0x7c2 <_Z17_psx_send_commandPhh+0x7c>
 7ce:	e0 91 6d 02 	lds	r30, 0x026D	; 0x80026d <_ZL15_attention_port>
 7d2:	f0 91 6e 02 	lds	r31, 0x026E	; 0x80026e <_ZL15_attention_port+0x1>
 7d6:	20 81       	ld	r18, Z
 7d8:	81 e0       	ldi	r24, 0x01	; 1
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	00 90 60 02 	lds	r0, 0x0260	; 0x800260 <_ZL14_attention_pin>
 7e0:	02 c0       	rjmp	.+4      	; 0x7e6 <_Z17_psx_send_commandPhh+0xa0>
 7e2:	88 0f       	add	r24, r24
 7e4:	99 1f       	adc	r25, r25
 7e6:	0a 94       	dec	r0
 7e8:	e2 f7       	brpl	.-8      	; 0x7e2 <_Z17_psx_send_commandPhh+0x9c>
 7ea:	82 2b       	or	r24, r18
 7ec:	80 83       	st	Z, r24
 7ee:	df 91       	pop	r29
 7f0:	cf 91       	pop	r28
 7f2:	1f 91       	pop	r17
 7f4:	0f 91       	pop	r16
 7f6:	08 95       	ret

000007f8 <_Z16psx_read_gamepadv>:
 7f8:	ea e4       	ldi	r30, 0x4A	; 74
 7fa:	f2 e0       	ldi	r31, 0x02	; 2
 7fc:	81 e0       	ldi	r24, 0x01	; 1
 7fe:	80 83       	st	Z, r24
 800:	82 e4       	ldi	r24, 0x42	; 66
 802:	81 83       	std	Z+1, r24	; 0x01
 804:	ec e4       	ldi	r30, 0x4C	; 76
 806:	f2 e0       	ldi	r31, 0x02	; 2
 808:	8f e5       	ldi	r24, 0x5F	; 95
 80a:	92 e0       	ldi	r25, 0x02	; 2
 80c:	11 92       	st	Z+, r1
 80e:	e8 17       	cp	r30, r24
 810:	f9 07       	cpc	r31, r25
 812:	e1 f7       	brne	.-8      	; 0x80c <_Z16psx_read_gamepadv+0x14>
 814:	65 e1       	ldi	r22, 0x15	; 21
 816:	8a e4       	ldi	r24, 0x4A	; 74
 818:	92 e0       	ldi	r25, 0x02	; 2
 81a:	95 cf       	rjmp	.-214    	; 0x746 <_Z17_psx_send_commandPhh>
 81c:	08 95       	ret

0000081e <_Z8psx_initPVhhS0_hS0_hS0_h>:
 81e:	2f 92       	push	r2
 820:	3f 92       	push	r3
 822:	4f 92       	push	r4
 824:	5f 92       	push	r5
 826:	6f 92       	push	r6
 828:	7f 92       	push	r7
 82a:	8f 92       	push	r8
 82c:	9f 92       	push	r9
 82e:	af 92       	push	r10
 830:	cf 92       	push	r12
 832:	df 92       	push	r13
 834:	ef 92       	push	r14
 836:	0f 93       	push	r16
 838:	1f 93       	push	r17
 83a:	cf 93       	push	r28
 83c:	df 93       	push	r29
 83e:	cd b7       	in	r28, 0x3d	; 61
 840:	de b7       	in	r29, 0x3e	; 62
 842:	67 97       	sbiw	r28, 0x17	; 23
 844:	0f b6       	in	r0, 0x3f	; 63
 846:	f8 94       	cli
 848:	de bf       	out	0x3e, r29	; 62
 84a:	0f be       	out	0x3f, r0	; 63
 84c:	cd bf       	out	0x3d, r28	; 61
 84e:	90 93 74 02 	sts	0x0274, r25	; 0x800274 <_ZL10_data_port+0x1>
 852:	80 93 73 02 	sts	0x0273, r24	; 0x800273 <_ZL10_data_port>
 856:	50 93 72 02 	sts	0x0272, r21	; 0x800272 <_ZL11_clock_port+0x1>
 85a:	40 93 71 02 	sts	0x0271, r20	; 0x800271 <_ZL11_clock_port>
 85e:	10 93 70 02 	sts	0x0270, r17	; 0x800270 <_ZL13_command_port+0x1>
 862:	00 93 6f 02 	sts	0x026F, r16	; 0x80026f <_ZL13_command_port>
 866:	d0 92 6e 02 	sts	0x026E, r13	; 0x80026e <_ZL15_attention_port+0x1>
 86a:	c0 92 6d 02 	sts	0x026D, r12	; 0x80026d <_ZL15_attention_port>
 86e:	4c 01       	movw	r8, r24
 870:	31 e0       	ldi	r19, 0x01	; 1
 872:	83 1a       	sub	r8, r19
 874:	91 08       	sbc	r9, r1
 876:	90 92 6a 02 	sts	0x026A, r9	; 0x80026a <_ZL9_data_ddr+0x1>
 87a:	80 92 69 02 	sts	0x0269, r8	; 0x800269 <_ZL9_data_ddr>
 87e:	2a 01       	movw	r4, r20
 880:	a1 e0       	ldi	r26, 0x01	; 1
 882:	4a 1a       	sub	r4, r26
 884:	51 08       	sbc	r5, r1
 886:	50 92 68 02 	sts	0x0268, r5	; 0x800268 <_ZL10_clock_ddr+0x1>
 88a:	40 92 67 02 	sts	0x0267, r4	; 0x800267 <_ZL10_clock_ddr>
 88e:	38 01       	movw	r6, r16
 890:	b1 e0       	ldi	r27, 0x01	; 1
 892:	6b 1a       	sub	r6, r27
 894:	71 08       	sbc	r7, r1
 896:	70 92 66 02 	sts	0x0266, r7	; 0x800266 <_ZL12_command_ddr+0x1>
 89a:	60 92 65 02 	sts	0x0265, r6	; 0x800265 <_ZL12_command_ddr>
 89e:	16 01       	movw	r2, r12
 8a0:	e1 e0       	ldi	r30, 0x01	; 1
 8a2:	2e 1a       	sub	r2, r30
 8a4:	31 08       	sbc	r3, r1
 8a6:	30 92 64 02 	sts	0x0264, r3	; 0x800264 <_ZL14_attention_ddr+0x1>
 8aa:	20 92 63 02 	sts	0x0263, r2	; 0x800263 <_ZL14_attention_ddr>
 8ae:	fc 01       	movw	r30, r24
 8b0:	32 97       	sbiw	r30, 0x02	; 2
 8b2:	f0 93 6c 02 	sts	0x026C, r31	; 0x80026c <_ZL8_data_in+0x1>
 8b6:	e0 93 6b 02 	sts	0x026B, r30	; 0x80026b <_ZL8_data_in>
 8ba:	20 93 62 02 	sts	0x0262, r18	; 0x800262 <_ZL10_clock_pin>
 8be:	e0 92 61 02 	sts	0x0261, r14	; 0x800261 <_ZL12_command_pin>
 8c2:	a0 92 60 02 	sts	0x0260, r10	; 0x800260 <_ZL14_attention_pin>
 8c6:	60 93 5f 02 	sts	0x025F, r22	; 0x80025f <_ZL9_data_pin>
 8ca:	d2 01       	movw	r26, r4
 8cc:	3c 91       	ld	r19, X
 8ce:	e1 e0       	ldi	r30, 0x01	; 1
 8d0:	f0 e0       	ldi	r31, 0x00	; 0
 8d2:	6f 01       	movw	r12, r30
 8d4:	02 c0       	rjmp	.+4      	; 0x8da <_Z8psx_initPVhhS0_hS0_hS0_h+0xbc>
 8d6:	cc 0c       	add	r12, r12
 8d8:	dd 1c       	adc	r13, r13
 8da:	2a 95       	dec	r18
 8dc:	e2 f7       	brpl	.-8      	; 0x8d6 <_Z8psx_initPVhhS0_hS0_hS0_h+0xb8>
 8de:	23 2f       	mov	r18, r19
 8e0:	2c 29       	or	r18, r12
 8e2:	2c 93       	st	X, r18
 8e4:	d1 01       	movw	r26, r2
 8e6:	7c 91       	ld	r23, X
 8e8:	9f 01       	movw	r18, r30
 8ea:	02 c0       	rjmp	.+4      	; 0x8f0 <_Z8psx_initPVhhS0_hS0_hS0_h+0xd2>
 8ec:	22 0f       	add	r18, r18
 8ee:	33 1f       	adc	r19, r19
 8f0:	aa 94       	dec	r10
 8f2:	e2 f7       	brpl	.-8      	; 0x8ec <_Z8psx_initPVhhS0_hS0_hS0_h+0xce>
 8f4:	27 2b       	or	r18, r23
 8f6:	2c 93       	st	X, r18
 8f8:	d3 01       	movw	r26, r6
 8fa:	7c 91       	ld	r23, X
 8fc:	9f 01       	movw	r18, r30
 8fe:	02 c0       	rjmp	.+4      	; 0x904 <_Z8psx_initPVhhS0_hS0_hS0_h+0xe6>
 900:	22 0f       	add	r18, r18
 902:	33 1f       	adc	r19, r19
 904:	ea 94       	dec	r14
 906:	e2 f7       	brpl	.-8      	; 0x900 <_Z8psx_initPVhhS0_hS0_hS0_h+0xe2>
 908:	37 2f       	mov	r19, r23
 90a:	32 2b       	or	r19, r18
 90c:	3c 93       	st	X, r19
 90e:	d4 01       	movw	r26, r8
 910:	7c 91       	ld	r23, X
 912:	02 c0       	rjmp	.+4      	; 0x918 <_Z8psx_initPVhhS0_hS0_hS0_h+0xfa>
 914:	ee 0f       	add	r30, r30
 916:	ff 1f       	adc	r31, r31
 918:	6a 95       	dec	r22
 91a:	e2 f7       	brpl	.-8      	; 0x914 <_Z8psx_initPVhhS0_hS0_hS0_h+0xf6>
 91c:	3e 2f       	mov	r19, r30
 91e:	30 95       	com	r19
 920:	37 23       	and	r19, r23
 922:	3c 93       	st	X, r19
 924:	dc 01       	movw	r26, r24
 926:	3c 91       	ld	r19, X
 928:	e3 2b       	or	r30, r19
 92a:	ec 93       	st	X, r30
 92c:	fa 01       	movw	r30, r20
 92e:	80 81       	ld	r24, Z
 930:	c8 2a       	or	r12, r24
 932:	c0 82       	st	Z, r12
 934:	d8 01       	movw	r26, r16
 936:	8c 91       	ld	r24, X
 938:	28 2b       	or	r18, r24
 93a:	2c 93       	st	X, r18
 93c:	5d df       	rcall	.-326    	; 0x7f8 <_Z16psx_read_gamepadv>
 93e:	85 e0       	ldi	r24, 0x05	; 5
 940:	e0 e0       	ldi	r30, 0x00	; 0
 942:	f2 e0       	ldi	r31, 0x02	; 2
 944:	de 01       	movw	r26, r28
 946:	53 96       	adiw	r26, 0x13	; 19
 948:	01 90       	ld	r0, Z+
 94a:	0d 92       	st	X+, r0
 94c:	8a 95       	dec	r24
 94e:	e1 f7       	brne	.-8      	; 0x948 <_Z8psx_initPVhhS0_hS0_hS0_h+0x12a>
 950:	65 e0       	ldi	r22, 0x05	; 5
 952:	ce 01       	movw	r24, r28
 954:	43 96       	adiw	r24, 0x13	; 19
 956:	f7 de       	rcall	.-530    	; 0x746 <_Z17_psx_send_commandPhh>
 958:	89 e0       	ldi	r24, 0x09	; 9
 95a:	e5 e0       	ldi	r30, 0x05	; 5
 95c:	f2 e0       	ldi	r31, 0x02	; 2
 95e:	de 01       	movw	r26, r28
 960:	1a 96       	adiw	r26, 0x0a	; 10
 962:	01 90       	ld	r0, Z+
 964:	0d 92       	st	X+, r0
 966:	8a 95       	dec	r24
 968:	e1 f7       	brne	.-8      	; 0x962 <_Z8psx_initPVhhS0_hS0_hS0_h+0x144>
 96a:	69 e0       	ldi	r22, 0x09	; 9
 96c:	ce 01       	movw	r24, r28
 96e:	0a 96       	adiw	r24, 0x0a	; 10
 970:	ea de       	rcall	.-556    	; 0x746 <_Z17_psx_send_commandPhh>
 972:	89 e0       	ldi	r24, 0x09	; 9
 974:	ee e0       	ldi	r30, 0x0E	; 14
 976:	f2 e0       	ldi	r31, 0x02	; 2
 978:	de 01       	movw	r26, r28
 97a:	11 96       	adiw	r26, 0x01	; 1
 97c:	01 90       	ld	r0, Z+
 97e:	0d 92       	st	X+, r0
 980:	8a 95       	dec	r24
 982:	e1 f7       	brne	.-8      	; 0x97c <_Z8psx_initPVhhS0_hS0_hS0_h+0x15e>
 984:	69 e0       	ldi	r22, 0x09	; 9
 986:	ce 01       	movw	r24, r28
 988:	01 96       	adiw	r24, 0x01	; 1
 98a:	dd de       	rcall	.-582    	; 0x746 <_Z17_psx_send_commandPhh>
 98c:	67 96       	adiw	r28, 0x17	; 23
 98e:	0f b6       	in	r0, 0x3f	; 63
 990:	f8 94       	cli
 992:	de bf       	out	0x3e, r29	; 62
 994:	0f be       	out	0x3f, r0	; 63
 996:	cd bf       	out	0x3d, r28	; 61
 998:	df 91       	pop	r29
 99a:	cf 91       	pop	r28
 99c:	1f 91       	pop	r17
 99e:	0f 91       	pop	r16
 9a0:	ef 90       	pop	r14
 9a2:	df 90       	pop	r13
 9a4:	cf 90       	pop	r12
 9a6:	af 90       	pop	r10
 9a8:	9f 90       	pop	r9
 9aa:	8f 90       	pop	r8
 9ac:	7f 90       	pop	r7
 9ae:	6f 90       	pop	r6
 9b0:	5f 90       	pop	r5
 9b2:	4f 90       	pop	r4
 9b4:	3f 90       	pop	r3
 9b6:	2f 90       	pop	r2
 9b8:	08 95       	ret

000009ba <_Z10psx_buttonj>:
}


uint16_t psx_buttons() {
  uint16_t buttons = *(uint16_t*)(_data + 3); //Get 2 bytes, comprising data positions 3 and 4.
  return ~buttons;
 9ba:	20 91 4d 02 	lds	r18, 0x024D	; 0x80024d <_ZL5_data+0x3>
 9be:	30 91 4e 02 	lds	r19, 0x024E	; 0x80024e <_ZL5_data+0x4>
 9c2:	20 95       	com	r18
 9c4:	30 95       	com	r19
}

uint8_t psx_button(uint16_t button) {
  uint16_t buttons = psx_buttons();
  return ((buttons & button) > 0);
 9c6:	28 23       	and	r18, r24
 9c8:	39 23       	and	r19, r25
 9ca:	81 e0       	ldi	r24, 0x01	; 1
 9cc:	23 2b       	or	r18, r19
 9ce:	09 f4       	brne	.+2      	; 0x9d2 <_Z10psx_buttonj+0x18>
 9d0:	80 e0       	ldi	r24, 0x00	; 0
}
 9d2:	08 95       	ret

000009d4 <_Z9psx_stickj>:

uint8_t psx_stick(unsigned int stick) {
  return _data[stick];
 9d4:	86 5b       	subi	r24, 0xB6	; 182
 9d6:	9d 4f       	sbci	r25, 0xFD	; 253
 9d8:	fc 01       	movw	r30, r24
 9da:	80 81       	ld	r24, Z
 9dc:	08 95       	ret

000009de <__umulhisi3>:
 9de:	a2 9f       	mul	r26, r18
 9e0:	b0 01       	movw	r22, r0
 9e2:	b3 9f       	mul	r27, r19
 9e4:	c0 01       	movw	r24, r0
 9e6:	a3 9f       	mul	r26, r19
 9e8:	70 0d       	add	r23, r0
 9ea:	81 1d       	adc	r24, r1
 9ec:	11 24       	eor	r1, r1
 9ee:	91 1d       	adc	r25, r1
 9f0:	b2 9f       	mul	r27, r18
 9f2:	70 0d       	add	r23, r0
 9f4:	81 1d       	adc	r24, r1
 9f6:	11 24       	eor	r1, r1
 9f8:	91 1d       	adc	r25, r1
 9fa:	08 95       	ret

000009fc <_exit>:
 9fc:	f8 94       	cli

000009fe <__stop_program>:
 9fe:	ff cf       	rjmp	.-2      	; 0x9fe <__stop_program>
